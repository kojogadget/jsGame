(()=>{var e={946:(e,t,n)=>{"use strict";n.r(t)},667:e=>{e.exports='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><title>cross</title><path d="M31.708 25.708c-0-0-0-0-0-0l-9.708-9.708 9.708-9.708c0-0 0-0 0-0 0.105-0.105 0.18-0.227 0.229-0.357 0.133-0.356 0.057-0.771-0.229-1.057l-4.586-4.586c-0.286-0.286-0.702-0.361-1.057-0.229-0.13 0.048-0.252 0.124-0.357 0.228 0 0-0 0-0 0l-9.708 9.708-9.708-9.708c-0-0-0-0-0-0-0.105-0.104-0.227-0.18-0.357-0.228-0.356-0.133-0.771-0.057-1.057 0.229l-4.586 4.586c-0.286 0.286-0.361 0.702-0.229 1.057 0.049 0.13 0.124 0.252 0.229 0.357 0 0 0 0 0 0l9.708 9.708-9.708 9.708c-0 0-0 0-0 0-0.104 0.105-0.18 0.227-0.229 0.357-0.133 0.355-0.057 0.771 0.229 1.057l4.586 4.586c0.286 0.286 0.702 0.361 1.057 0.229 0.13-0.049 0.252-0.124 0.357-0.229 0-0 0-0 0-0l9.708-9.708 9.708 9.708c0 0 0 0 0 0 0.105 0.105 0.227 0.18 0.357 0.229 0.356 0.133 0.771 0.057 1.057-0.229l4.586-4.586c0.286-0.286 0.362-0.702 0.229-1.057-0.049-0.13-0.124-0.252-0.229-0.357z"></path></svg>'},705:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TYPING_SPEED=void 0,t.TYPING_SPEED=20},92:function(e,t,n){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,n,s){void 0===s&&(s=n),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,s){void 0===s&&(s=n),e[s]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&s(t,e,n);return r(t,e),t},o=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))((function(r,i){function o(e){try{u(s.next(e))}catch(e){i(e)}}function a(e){try{u(s.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((s=s.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(946);const u=i(n(901)),l=a(n(874)),d=a(n(337)),c=a(n(239)),p=a(n(857)),h=a(n(413));l.default.addHandlerIntro((function(){return o(this,void 0,void 0,(function*(){l.default.render()}))})),c.default.addHandlerName((function(){if(u.state.name)return;const e=c.default.getName();e&&(u.state.name=e,c.default.render(u.state.name),d.default.renderOption())})),p.default.addHandlerOptions((function(e){const t=u.games.find((t=>t.id===e));t&&(u.state.active=e,p.default.render(t.heading,"heading"),t.subHeading&&p.default.render(t.subHeading,"subHeading"),p.default.render(t.intro),d.default.setInteraction(t))})),p.default.addHandlerPlay((function(){const e=u.games.find((e=>e.id===u.state.active));if(!e)return;const t=p.default.gameResponse(e);t&&p.default.render(e.play(t),e.renderType)})),p.default.addHandlerExit((function(){d.default.renderOption(),d.default.resetResponse(),u.state.active="",h.default.render("","empty"),h.default.render(u.state.name)}))},901:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.games=t.state=void 0,t.state={name:"",active:""},t.games=[{heading:"Tic Tac Toe",id:"tictactoe",intro:"GAME NOT READY!",error:"",renderType:"",interaction:"",inputType:"",placeholder:["Question","Another question"],play:function(){return"NOT READY!"}},{heading:"Inventory Check",id:"inventorycheck",intro:"GAME NOT READY!",error:"",renderType:"",interaction:"",inputType:"",placeholder:["Question","Another question"],play:function(){return"NOT READY!"}},{heading:"Magic 8 Ball",id:"magic8Ball",intro:"Ask me a question!",error:"> You need to type something...",renderType:"",interaction:"response",inputType:"text",placeholder:["Question","Another question?"],play:function(){const e=["Not with that look...","Get out of here","Yes!","No..","Dum question..next!","We'll see","Maybe","Do you need a hug?","Think about it..","Hush!","Ew!","What is your point? Stupid..","k"];return e[Math.trunc(Math.random()*e.length)]}},{heading:"Collatz",subHeading:"Math's simplest impossible problem!<br>If you take a number through this equation the output will always become 1, whatever positive number. The equation will take a even number en divide it by 2, and a odd number will be multiplied by 3 and be added a 1. The result will go through the same process and finally give us 1 as the final result",id:"collatz",intro:"Try it out :)",error:"> You need to give a number...",renderType:"quick",interaction:"response",inputType:"number",inputOption:["min","1"],placeholder:["Number","Try again :)"],play:function(e){let t=+e;const n=[t];for(;1!==t;)t%2==0?t/=2:t=3*t+1,n.push(t);return n.join(" -> ")}},{heading:"Guess The Number",id:"guessthenumber",intro:"GAME NOT READY!",error:"",renderType:"",interaction:"",inputType:"",placeholder:["Question","Another question"],play:function(){return"NOT READY!"}}]},180:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(667)),i=n(705);t.default=class{constructor(){this._textBox=document.querySelector(".text-box"),this._responseForm=document.querySelector(".response"),this._responseInput=document.querySelector(".response__text")}render(e="",t=""){if("heading"===t){const t=this._generateHeading(e);return this._parentElement.insertAdjacentHTML("beforeend",t),void this._setWindow()}if("subHeading"===t){const t=`<li class="message__text--sub">${e}</li>`;return void this._parentElement.insertAdjacentHTML("beforeend",t)}if("custom"===t){const t=(new Date).toISOString().slice(-12),n=e;this._parentElement.insertAdjacentHTML("beforeend",`\n      <li class="message__text" id="${t}"></li>\n          `);const s=document.getElementById(t);return this._setWindow(),void this._writingText(n,s)}if("quick"===t)return this._parentElement.insertAdjacentHTML("beforeend",`\n      <li class="message__text">${e}</li>\n          `),void this._setWindow();if("empty"===t){const e='\n        <li class="message__text">&nbsp;</li>\n        <li class="message__text">&nbsp;</li>\n            ';return this._parentElement.insertAdjacentHTML("beforeend",e),void this._setWindow()}const n=(new Date).toISOString().slice(-12),s=this._generateMarkup(e);this._parentElement.insertAdjacentHTML("beforeend",`\n      <li class="message__text" id="${n}"></li>\n          `);const r=document.getElementById(n);this._setWindow(),this._writingText(s,r)}_setWindow(){const e=document.querySelector(".text-box__container");e.scrollTo(0,e.scrollHeight)}_writingText(e,t){let n=0;const s=i.TYPING_SPEED;!function r(){n<e.length&&(t.innerHTML+=e.charAt(n),n++,setTimeout(r,s))}()}_renderExit(){var e;const t=`\n              <button class="exit hidden">\n                <svg class="exit__icon">\n                  ${r.default}\n                </svg>\n              </button>\n            `;null===(e=document.querySelector(".text-box"))||void 0===e||e.insertAdjacentHTML("afterbegin",t)}_clear(){this._parentElement.innerHTML=""}_clearInput(){this._responseInput.value=""}}},857:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(180));class i extends r.default{constructor(){super(),this._parentElement=document.querySelector(".message__list"),this._generateHeading=function(e){return`\n                <td class="header--2">${e}</td>\n          `},this._generateMarkup=function(e){return`> ${e}`}}addHandlerOptions(e){var t;null===(t=document.querySelector(".options"))||void 0===t||t.addEventListener("click",(function(t){const n=t.target.closest(".options__btn");if(!n)return;const{game:s}=n.dataset;document.querySelector(".exit").classList.toggle("hidden"),e(s)}))}addHandlerPlay(e){this._responseForm.addEventListener("submit",(function(t){t.preventDefault(),e()}))}addHandlerExit(e){this._textBox.addEventListener("click",(function(t){const n=t.target.closest(".exit");n&&(n.classList.toggle("hidden"),e())}))}initGame(e){"magic8Ball"===e&&(this._responseInput.placeholder="Question")}gameResponse(e){const t=this._responseInput.value;return t?(this._clearInput(),this._responseInput.placeholder=e.placeholder[1],t):this.render(e.error,"custom")}}t.default=new i},239:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(180));class i extends r.default{constructor(){super(),this._parentElement=document.querySelector(".message__list"),this._generateMarkup=function(e){return`> Welcome, ${e||"Mr X"}! What program do you want to try?`}}addHandlerName(e){this._responseForm.addEventListener("submit",(function(t){t.preventDefault(),e()}))}getName(){const e=this._responseInput.value;return this._clearInput(),e}}t.default=new i},337:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(180));class i extends r.default{constructor(){super(),this._options=document.querySelector(".options"),this._parentElement=document.querySelector(".interaction")}_toggleOptionResponse(){this._responseForm.classList.toggle("hidden"),this._options.classList.toggle("hidden")}_hideInteraction(){this._responseForm.classList.contains("hidden")||this._responseForm.classList.toggle("hidden"),this._options.classList.contains("hidden")||this._options.classList.toggle("hidden")}renderOption(){this._responseForm.classList.contains("hidden")||this._responseForm.classList.toggle("hidden"),this._options.classList.contains("hidden")&&this._options.classList.toggle("hidden")}setInteraction(e){if("response"===e.interaction)return this._responseInput.placeholder=e.placeholder[0],this._responseInput.type=e.inputType,e.inputOption&&this._responseInput.setAttribute(e.inputOption[0],e.inputOption[1]),this._toggleOptionResponse(),void this._responseInput.focus();this._hideInteraction()}resetResponse(){const e=this._responseInput;for(e.value="";e.attributes.length>0;)e.removeAttribute(e.attributes[0].name);e.setAttribute("type","text"),e.setAttribute("class","response__text"),e.setAttribute("placeholder","Reset"),e.setAttribute("autocomplete","off")}}t.default=new i},874:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(180));class i extends r.default{constructor(){super(),this._parentElement=document.querySelector(".message__list"),this._generateMarkup=function(){return this._clear(),"> Hi! What is your name?"}}addHandlerIntro(e){this._renderExit(),window.addEventListener("load",(function(){e()}))}}t.default=new i},413:function(e,t,n){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(180));class i extends r.default{constructor(){super(),this._parentElement=document.querySelector(".message__list"),this._generateMarkup=function(e){const t=["Do you wish to try something else?",`Okay ${e}, what's next?`,"Lets do another one!","Are you done?"];return`> ${t[Math.trunc(Math.random()*t.length)]}`}}}t.default=new i}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var i=t[s]={exports:{}};return e[s].call(i.exports,i,i.exports,n),i.exports}n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(92)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,